<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'gh.client.id' => 'get1',
  'gh.client.secret' => 'get2',
  'gh.client.alg' => 'get3',
  'gh.repositories' => 'get4',
  'Authentication' => 'get5',
  'Memcached' => 'get6',
);

    protected function get1()
    {
                $value = $_ENV['GH_CLIENT_ID'] ?? $_SERVER['GH_CLIENT_ID'] ?? getenv('GH_CLIENT_ID');
        if (false !== $value) return $value;
        if (!false) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'GH_CLIENT_ID' has not been defined");
        }
        return NULL;
    }

    protected function get2()
    {
                $value = $_ENV['GH_CLIENT_SECRET'] ?? $_SERVER['GH_CLIENT_SECRET'] ?? getenv('GH_CLIENT_SECRET');
        if (false !== $value) return $value;
        if (!false) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'GH_CLIENT_SECRET' has not been defined");
        }
        return NULL;
    }

    protected function get3()
    {
                $value = $_ENV['GH_ALG'] ?? $_SERVER['GH_ALG'] ?? getenv('GH_ALG');
        if (false !== $value) return $value;
        if (!false) {
            throw new \DI\Definition\Exception\InvalidDefinition("The environment variable 'GH_ALG' has not been defined");
        }
        return NULL;
    }

    protected function get4()
    {
        return $this->resolveFactory(static function () {
        return \App\Utilities::getRepositoriesNames();
    }, 'gh.repositories');
    }

    protected function get5()
    {
        return $this->resolveFactory(static function (\DI\Container $c) {
        return new \App\KanbanBoard\Authentication(
            $c->get('gh.client.id'),
            $c->get('gh.client.secret'),
            $c->get('gh.client.alg'),
            $c->get('JWT'),
        );
    }, 'Authentication');
    }

    protected function get6()
    {
        return $this->resolveFactory(static function (\DI\Container $c) {
        $client = new \Clickalicious\Memcached\Client(
            \App\Utilities::env('MCACHED_HOST'),
            (int) \App\Utilities::env('MCACHED_PORT'),
            (int) \App\Utilities::env('MCACHED_EXP')
        );

        return $client;
    }, 'Memcached');
    }

}
